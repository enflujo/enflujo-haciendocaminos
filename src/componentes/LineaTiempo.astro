---
import { convertirEscala } from '@enflujo/alquimia';

interface Props {
  tiempo: string[];
  decadas: string[];
}

const { decadas, tiempo } = Astro.props;

const numeroDecadas = decadas.length;

const anchoLineaPorcentaje = 98;
const anchoDecada = anchoLineaPorcentaje / numeroDecadas;
const posX = (valor: number) => convertirEscala(valor, 1960, 2030, 0, anchoLineaPorcentaje);

function rango(min: number, max: number): number[] {
  const lon = max - min + 1;
  const arr = new Array(lon);

  for (let i = 0; i < lon; i++) {
    arr[i] = min + i;
  }
  return arr;
}

const listaAños = rango(1960, 2029);
---

<div id="contenedorLineaTiempo">
  <div id="contenedorGrafica">
    <svg height="100%" viewBox="0 0 100 100" preserveAspectRatio="none" style={`transform:translateX(2%)`}>
      <g id="grupoDecadas">
        {
          decadas.map((decada, i) => (
            <rect
              class={decadas.find((nombre) => nombre === decada) ? 'decada' : 'desactivado'}
              x={`${i * anchoDecada}%`}
              y="0"
              width="0"
              height="15px"
              stroke-width="1px"
            />
          ))
        }
      </g>

      <g> </g>
    </svg>

    <svg id="marcas" width={`${anchoLineaPorcentaje}%`} height="100%" style={`transform:translateX(2%)`}>
      {
        listaAños.map((fecha) => (
          <>
            <circle
              class={tiempo.find((nombre) => +nombre === fecha) ? '' : 'desactivado'}
              style={`transform:translate(${posX(fecha)}%, ${45}%)`}
              r="4"
              cx="10"
              cy="0"
              stroke="#62e595"
              stroke-width="1px"
            />
          </>
        ))
      }
      {
        listaAños.map((marca) => (
          <text
            class={tiempo.find((nombre) => +nombre === marca) ? '' : 'desactivado'}
            style={`transform:translate(${posX(+marca)}%, 75%)`}
            x="0"
            y="0"
          >
            {marca}
          </text>
        ))
      }
    </svg>
  </div>
</div>

<style lang="scss">
  @import '@/scss/constantes';
  #contenedorLineaTiempo {
    position: absolute;
    bottom: 0;
    width: 100vw;
    margin: 0 auto;
  }

  #contenedorGrafica {
    position: relative;
    height: var(--altoLineaTiempo);
    background-color: var(--fondoVerdeOscuro);
    z-index: 3;
    width: 100vw;
    overflow-y: clip;
    overflow-x: auto;

    #decadas {
      fill: rgba(26, 42, 34, 0.3);
    }
  }

  svg {
    position: absolute;
    bottom: 0;
    left: 0;
    width: var(--anchoLineaTiempo);

    path {
      fill: var(--fondoVerdeOscuro);
    }

    text {
      font-size: 0.5em;
      fill: rgba(255, 255, 222, 1);
      text-shadow: 1px 1px 1px rgba(26, 42, 34, 1);

      &.desactivado {
        opacity: 0.5;
      }
    }

    rect {
      &.decada {
        fill: #62e595;
        width: var(--anchoLineaTiempo);
      }
      &.desactivado {
        opacity: 0.5;
      }
    }

    circle {
      fill: #62e595;
      &.desactivado {
        fill: transparent;
        opacity: 0.2;
      }
    }
  }

  // Cambiar estilos según tamaño de pantalla
  @media screen and (min-width: $corte1) {
    svg {
      width: 350%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 350%;
      }
    }
  }

  @media screen and (min-width: $corte2) {
    svg {
      width: 210%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 210%;
      }
    }
  }

  @media screen and (min-width: $corte3) {
    svg {
      width: 150%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 150%;
      }
    }
  }

  @media screen and (min-width: $corte4) {
    svg {
      width: 120%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 120%;
      }
    }
  }

  @media screen and (min-width: 1650px) {
    svg {
      width: 98%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 98%;
      }
    }
  }
</style>
