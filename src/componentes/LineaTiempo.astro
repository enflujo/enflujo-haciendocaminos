---
import { convertirEscala } from '@enflujo/alquimia';

interface Props {
  tiempo: string[];
  decadas: string[];
}

const { decadas, tiempo } = Astro.props;

const numeroDecadas = decadas.length;
const anchoLineaPorcentaje = 98;
const anchoDecada = anchoLineaPorcentaje / numeroDecadas;
const años = tiempo.map((t) => +t);
const fechaMin = Math.min(...años);
const fechaMax = Math.max(...años);
const inicio = fechaMin - (fechaMin % 10);
const fin = fechaMax - ((fechaMax % 10) - 10);
const posX = (valor: number) => convertirEscala(valor, inicio, fin, 0, anchoLineaPorcentaje);

function rango(min: number, max: number) {
  const lon = max - min + 1;
  const arr: { año: number; indice: number }[] = [];

  for (let i = 0; i < lon; i++) {
    const año = min + i;
    const indice = tiempo.findIndex((fecha) => fecha === `${año}`);
    arr.push({ año, indice });
  }

  return arr;
}

const listaAños = rango(1960, 2029);
---

<div id="contenedorLineaTiempo">
  <div id="contenedorGrafica">
    <svg height="100%" viewBox="0 0 100 100" preserveAspectRatio="none" style={`transform:translateX(2%)`}>
      <g id="grupoDecadas">
        {
          decadas.map((decada, i) => (
            <rect
              class={decadas.find((nombre) => nombre === decada) ? 'decada' : 'desactivado'}
              x={`${i * anchoDecada}%`}
              y="0"
              width="0"
              height="15px"
              stroke-width="1px"
            />
          ))
        }
      </g>
    </svg>

    <svg id="marcas" width={`${anchoLineaPorcentaje}%`} height="100%" style={`transform:translateX(2%)`}>
      {
        listaAños.map((obj) => (
          <g
            class={`${tiempo.find((nombre) => +nombre === obj.año) ? 'punto' : 'desactivado'}`}
            style={`transform:translate(${posX(obj.año)}%, 45%)`}
            data-año={obj.año}
            data-indice={obj.indice}
          >
            <circle r="4" cx="10" cy="0" stroke="#62e595" stroke-width="1px" />
            <text class="fecha" style="transform:translateY(25%)" x="0" y="0">
              {obj.año}
            </text>
            <rect x="0" y="-5" width="20" height="28" fill="transparent" />
          </g>
        ))
      }
    </svg>
  </div>
</div>

<script>
  import { actualizarUrl, datosFicha, datosLinea, vista } from '@/utilidades/cerebro';
  const marcas = document.getElementById('marcas') as HTMLElement & SVGElement;
  const puntos = marcas.querySelectorAll<SVGGElement>('.punto');

  puntos.forEach((punto) => {
    punto.onclick = () => {
      actualizarUrl([
        { nombre: 'id', valor: punto.dataset.indice as string },
        { nombre: 'tipo', valor: vista.get() === 'proyectos' ? 'años' : 'graduacion' }
      ]);
    };
  });

  datosLinea.subscribe((datos) => {
    if (!datos.años?.length) {
      puntos.forEach((punto) => punto.classList.remove('desactivado'));
      return;
    }

    puntos.forEach((punto) => punto.classList.add('desactivado'));

    datos.años.forEach((año) => {
      const elemento = marcas.querySelector<SVGGElement>(`.punto[data-año="${año}"]`);
      elemento?.classList.remove('desactivado');
    });
  });

  // esto vuelve a activar todos los años cuando se cierra la ficha
  datosFicha.subscribe((ficha) => {
    if (!ficha.visible) {
      datosLinea.setKey('años', []);
    }
  });
</script>

<style lang="scss">
  @import '@/scss/constantes';
  #contenedorLineaTiempo {
    position: absolute;
    bottom: 0;
    width: 100vw;
    margin: 0 auto;
  }

  #contenedorGrafica {
    position: relative;
    height: var(--altoLineaTiempo);
    background-color: var(--fondoVerdeOscuro);
    z-index: 3;
    width: 100vw;
    overflow-y: clip;
    overflow-x: auto;

    #decadas {
      fill: rgba(26, 42, 34, 0.3);
    }
  }

  svg {
    position: absolute;
    bottom: 0;
    left: 0;
    width: var(--anchoLineaTiempo);

    path {
      fill: var(--fondoVerdeOscuro);
    }

    .punto {
      cursor: pointer;
    }

    .punto,
    .punto circle {
      transition: all 0.8s ease-out;
    }

    .desactivado {
      opacity: 0.5;

      &:hover {
        cursor: pointer;
        opacity: 0.8;
        circle {
          opacity: 0.8;
        }
      }

      circle {
        fill: rgba(26, 42, 34, 0.8);
        opacity: 0.2;
      }
    }

    text {
      font-size: 0.5em;
      fill: rgba(255, 255, 222, 1);
      text-shadow: 1px 1px 1px rgba(26, 42, 34, 1);
    }

    rect {
      &.decada {
        fill: #62e595;
        width: var(--anchoLineaTiempo);
      }
    }

    circle {
      fill: #62e595;
    }
  }

  // Cambiar estilos según tamaño de pantalla
  @media screen and (min-width: $corte1) {
    svg {
      width: 350%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 350%;
      }
    }
  }

  @media screen and (min-width: $corte2) {
    svg {
      width: 210%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 210%;
      }
    }
  }

  @media screen and (min-width: $corte3) {
    svg {
      width: 150%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 150%;
      }
    }
  }

  @media screen and (min-width: $corte4) {
    svg {
      width: 120%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 120%;
      }
    }
  }

  @media screen and (min-width: 1650px) {
    svg {
      width: 98%;
    }

    text {
      font-size: 0.6em;
    }

    rect {
      &.decada {
        width: 98%;
      }
    }
  }
</style>
